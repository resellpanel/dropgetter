// script.js
document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    const loadingStateDiv = document.getElementById('loading-state');
    const errorStateDiv = document.getElementById('error-state');
    const errorMessageP = document.getElementById('error-message');
    const closeErrorBtn = document.getElementById('close-error-btn');
    const caseDisplayStateDiv = document.getElementById('case-display-state');
    const caseEmojiDiv = document.getElementById('case-emoji');
    const caseNameH1 = document.getElementById('case-name');
    const caseCostSpan = document.getElementById('case-cost');
    const userBalanceSpan = document.getElementById('user-balance');
    const notEnoughFundsP = document.getElementById('not-enough-funds');
    const openCaseBtn = document.getElementById('open-case-btn');
    const openBtnCostSpan = document.getElementById('open-btn-cost');
    const openingStateDiv = document.getElementById('opening-state');
    const rouletteTrack = document.querySelector('.roulette-track');
    const openingStatusText = document.getElementById('opening-status-text');
    const visualPrizeText = document.getElementById('visual-prize-text');


    let userId = null;
    let caseKey = null;
    let caseCost = 0;
    let balance = 0;
    let caseName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å';
    let caseEmoji = '‚ùì';
    let possiblePrizes = ['‚≠ê', 'üí£', 'üéÅ', '‚ùì', 'üíé', 'üçÄ', '‚ú®']; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –µ—Å–ª–∏ –∏–∑ URL –Ω–µ –ø—Ä–∏–¥—É—Ç

    function showState(stateId) {
        ['loading-state', 'error-state', 'case-display-state', 'opening-state'].forEach(id => {
            const el = document.getElementById(id);
            if (el) {
                el.style.display = (id === stateId) ? 'flex' : 'none';
                 // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è flex-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                if (id === stateId) {
                     el.style.flexDirection = 'column';
                     el.style.alignItems = 'center';
                     el.style.justifyContent = 'center';
                }
            }
        });
        // –î–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è display, –∫–Ω–æ–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –µ—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–µ
        if (stateId === 'case-display-state' && caseDisplayStateDiv) {
             caseDisplayStateDiv.style.justifyContent = 'space-around';
        }
    }

    function showError(message, autoClose = false) {
        if (errorMessageP) errorMessageP.textContent = message;
        showState('error-state');
        if (autoClose && tg) {
            setTimeout(() => tg.close(), 2500);
        }
    }
    
    showState('loading-state'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    if (tg) {
        tg.ready();
        tg.expand();
        tg.setHeaderColor(tg.themeParams.secondary_bg_color || '#FFC107'); // –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–≤–µ—Ç–∞ —à–∞–ø–∫–∏
        // tg.setBackgroundColor(tg.themeParams.bg_color || '#FFF9C4'); // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ WebApp


        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            userId = tg.initDataUnsafe.user.id?.toString();
        }

        const queryParams = new URLSearchParams(window.location.search);
        console.log("Raw Query Params:", window.location.search);

        const pUserIdFromUrl = queryParams.get('userId');
        if (!userId && pUserIdFromUrl) userId = pUserIdFromUrl;

        caseKey = queryParams.get('caseKey');
        const pCaseCost = queryParams.get('caseCost');
        const pBalance = queryParams.get('balance');
        const pCaseName = queryParams.get('caseName');
        const pCaseEmoji = queryParams.get('caseEmoji');
        const prizesParam = queryParams.get('prizes');

        console.log("Parsed Params:", { userId, caseKey, pCaseCost, pBalance, pCaseName, pCaseEmoji, prizesParam});


        if (prizesParam) {
            try {
                let decodedPrizes = decodeURIComponent(prizesParam);
                possiblePrizes = JSON.parse(decodedPrizes);
                if (!Array.isArray(possiblePrizes) || possiblePrizes.length === 0) {
                    console.warn("Prizes data from URL is invalid or empty, using defaults.");
                    possiblePrizes = ['‚≠ê', 'üí£', 'üéÅ', '‚ùì', 'üíé', 'üçÄ', '‚ú®'];
                }
            } catch (e) {
                console.error("Error parsing prizes data:", e, "Raw prizes param:", prizesParam);
                showError("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.", true);
                return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–∏–∑—ã –∫—Ä–∏—Ç–∏—á–Ω—ã
            }
        } else {
             console.warn("Prizes data not found in URL, using defaults for animation.");
        }


        if (userId && caseKey && pCaseCost !== null && pBalance !== null) {
            caseCost = parseInt(pCaseCost, 10);
            balance = parseInt(pBalance, 10);

            if (isNaN(caseCost) || isNaN(balance)) {
                showError("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–ª–∏ –±–∞–ª–∞–Ω—Å).", true);
                return;
            }

            caseName = pCaseName ? decodeURIComponent(pCaseName) : '–ö–µ–π—Å';
            caseEmoji = pCaseEmoji ? decodeURIComponent(pCaseEmoji) : '‚ùì';

            if (caseEmojiDiv) caseEmojiDiv.textContent = caseEmoji;
            if (caseNameH1) caseNameH1.textContent = caseName;
            if (caseCostSpan) caseCostSpan.textContent = caseCost.toString();
            if (userBalanceSpan) userBalanceSpan.textContent = balance.toString();
            if (openBtnCostSpan) openBtnCostSpan.textContent = caseCost.toString();

            if (balance < caseCost) {
                if (notEnoughFundsP) notEnoughFundsP.style.display = 'block';
                if (openCaseBtn) openCaseBtn.disabled = true;
            } else {
                 if (notEnoughFundsP) notEnoughFundsP.style.display = 'none';
                 if (openCaseBtn) openCaseBtn.disabled = false;
            }
            showState('case-display-state');
        } else {
            console.error("One or more critical parameters are missing:", { userId, caseKey, pCaseCost, pBalance });
            showError("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–µ–π—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", true);
        }

    } else {
        console.error("Telegram WebApp API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        showError("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ Telegram.", true);
    }

    function populateRouletteTrack(trackElement, prizesArray) {
        if (!trackElement) return;
        trackElement.innerHTML = ''; // –û—á–∏—â–∞–µ–º

        const repetitionFactor = 30; // –ë–æ–ª—å—à–µ –¥–ª—è –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–π –∏ –ø–ª–∞–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        let fullTrackItems = [];
        for (let i = 0; i < repetitionFactor; i++) {
            let shuffledPrizes = [...prizesArray].sort(() => 0.5 - Math.random());
            fullTrackItems = fullTrackItems.concat(shuffledPrizes);
        }

        fullTrackItems.forEach(prizeEmoji => {
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('roulette-item');
            itemDiv.textContent = prizeEmoji;
            trackElement.appendChild(itemDiv);
        });
        return fullTrackItems; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    }

    async function startRouletteAnimation() {
        if (!rouletteTrack || possiblePrizes.length === 0) {
            showError("–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–∞—Ö.", true);
            return;
        }

        const fullTrackItems = populateRouletteTrack(rouletteTrack, possiblePrizes);
        if (openingStatusText) openingStatusText.textContent = "–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...";
        if (visualPrizeText) visualPrizeText.style.display = 'none';


        const itemWidth = 70; // –®–∏—Ä–∏–Ω–∞ –∏–∑ CSS .roulette-item
        const viewportWidth = rouletteTrack.parentElement.clientWidth; // –®–∏—Ä–∏–Ω–∞ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏

        // –ù–∞—á–∞–ª—å–Ω–æ–µ "–±—ã—Å—Ç—Ä–æ–µ" —Å–º–µ—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Ä—É–ª–µ—Ç–∫–∞ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∞—Å—å —Å —Å–∞–º–æ–≥–æ –∫—Ä–∞—è
        const initialOffset = (fullTrackItems.length / 2 - 5) * itemWidth; // –ù–∞—á–Ω–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ —Å —Å–µ—Ä–µ–¥–∏–Ω—ã
        rouletteTrack.style.transition = 'none';
        rouletteTrack.style.transform = `translateX(-${initialOffset}px)`;

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π "–≤–∏–∑—É–∞–ª—å–Ω—ã–π" –ø—Ä–∏–∑
        const visualWinIndexInOriginalSet = Math.floor(Math.random() * possiblePrizes.length);
        const visualWinEmoji = possiblePrizes[visualWinIndexInOriginalSet];

        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —ç—Ç–æ–≥–æ –ø—Ä–∏–∑–∞ –±–ª–∏–∂–µ –∫ –∫–æ–Ω—Ü—É —Ç—Ä–µ–∫–∞ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        // –ò—â–µ–º —Å –∫–æ–Ω—Ü–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3-—Ö –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö –Ω–∞–±–æ—Ä–∞)
        let targetStopOverallIndex = -1;
        for (let i = fullTrackItems.length - 1; i >= fullTrackItems.length - (possiblePrizes.length * 3); i--) {
            if (fullTrackItems[i] === visualWinEmoji) {
                targetStopOverallIndex = i;
                break;
            }
        }
        if (targetStopOverallIndex === -1) { // –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –Ω–∞—à–ª–∏, –±–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            targetStopOverallIndex = fullTrackItems.length - Math.floor(possiblePrizes.length * 1.5) + visualWinIndexInOriginalSet;
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é X –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–∫, —á—Ç–æ–±—ã targetStopOverallIndex –±—ã–ª –ø–æ —Ü–µ–Ω—Ç—Ä—É —É–∫–∞–∑–∞—Ç–µ–ª—è
        const finalPositionX = -(targetStopOverallIndex * itemWidth - (viewportWidth / 2) + (itemWidth / 2));

        // –î–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –≤—Ä–µ–º—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ
        await new Promise(resolve => setTimeout(resolve, 50));

        const animationDuration = 5000 + Math.random() * 1500; // 5 - 6.5 —Å–µ–∫—É–Ω–¥
        rouletteTrack.style.transition = `transform ${animationDuration}ms cubic-bezier(0.2, 0.9, 0.3, 1.0)`; // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è –∫—Ä–∏–≤–∞—è
        rouletteTrack.style.transform = `translateX(${finalPositionX}px)`;

        setTimeout(() => {
            if (openingStatusText) openingStatusText.textContent = "–£–¥–∞—á–∞ —É–ª—ã–±–Ω—É–ª–∞—Å—å!";
            if (visualPrizeText) {
                visualPrizeText.textContent = `–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ: ${visualWinEmoji}`;
                visualPrizeText.style.display = 'block';
            }
            
            const dataToSend = JSON.stringify({
                action: 'open_case',
                userId: userId, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ userId –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
                caseKey: caseKey, // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ caseKey –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
            });
            tg.sendData(dataToSend);
            
             setTimeout(() => {
                if(tg) tg.close();
             }, 2000); // –î–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º

        }, animationDuration + 100); // +100ms –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    }

    function handleOpenCase() {
        if (!tg) { showError("–û—à–∏–±–∫–∞ Telegram API", true); return; }
        if (!caseKey || userId === null || typeof caseCost !== 'number' || typeof balance !== 'number' ) {
            showError("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.", true); return;
        }
        if (balance < caseCost) {
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–∏–¥–∏–º–æ
            return;
        }

        showState('opening-state');
        if (openCaseBtn) openCaseBtn.disabled = true;
        if (tg.HapticFeedback) tg.HapticFeedback.impactOccurred('heavy'); // –°–∏–ª—å–Ω–µ–µ –≤–∏–±—Ä–∞—Ü–∏—è

        startRouletteAnimation();
    }

    if (openCaseBtn) {
        openCaseBtn.addEventListener('click', handleOpenCase);
    }
    if (closeErrorBtn) {
        closeErrorBtn.addEventListener('click', () => {
            if(tg) tg.close();
        });
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    if (tg && tg.themeParams) {
        const root = document.documentElement;
        const themeMappings = {
            'bg_color': '--body-bg',
            'text_color': '--main-text',
            'hint_color': '--hint-text',
            'link_color': '--link-color',
            'button_color': '--button-bg',
            'button_text_color': '--button-text',
            'secondary_bg_color': '--container-bg-tg' // –î–ª—è —Ñ–æ–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç body
        };
        for (const key in tg.themeParams) {
            if (Object.hasOwnProperty.call(tg.themeParams, key) && themeMappings[key]) {
                root.style.setProperty(themeMappings[key], tg.themeParams[key]);
            }
        }
        // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Ü–≤–µ—Ç–∞ –∏–∑ style.css –±—ã–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏, –∞ —Ç–µ–º–∞ –¢–ì –∏—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–ª–∞,
        // —Ç–æ –≤ CSS –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ --tg-theme-* –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤–∞—à–∏—Ö --primary-yellow –∏ —Ç.–¥.
        // –õ–∏–±–æ –Ω–∞–æ–±–æ—Ä–æ—Ç, –µ—Å–ª–∏ –≤–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ, —Ç–æ –Ω–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏—Ö –∑–¥–µ—Å—å –∏–ª–∏ –¥–µ–ª–∞—Ç—å —ç—Ç–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π.
        // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, —Å–µ–π—á–∞—Å —è –æ—Å—Ç–∞–≤–ª—è—é –≤–∞—à–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Ü–≤–µ—Ç–∞ –≤ CSS, –∞ —Ç–µ–º–∞ –¢–ì –º–æ–∂–µ—Ç –∏—Ö –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –µ—Å–ª–∏ CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å—Ç–∏–ª—è—Ö.
        // –ß—Ç–æ–±—ã —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–æ, –≤–∞—à CSS –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∏–ø–∞ var(--tg-theme-bg-color)
    }
});
