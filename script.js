// script_v2.js
document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    // –≠–ª–µ–º–µ–Ω—Ç—ã UI
    const appBalanceSpan = document.getElementById('app-balance');
    const screens = document.querySelectorAll('.screen');
    const navButtons = document.querySelectorAll('.nav-button');
    const initialLoadingScreen = document.getElementById('initial-loading-screen');
    const mainHubScreen = document.getElementById('main-hub-screen'); // –ü–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
    const depositScreen = document.getElementById('deposit-screen');
    const gamesScreen = document.getElementById('games-screen');
    const profileScreen = document.getElementById('profile-screen');
    const caseOpeningScreen = document.getElementById('case-opening-screen');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã ID)
    const caseEmojiOpenDiv = document.getElementById('case-emoji-open');
    const caseNameOpenH2 = document.getElementById('case-name-open');
    const caseCostOpenSpan = document.getElementById('case-cost-open');
    const userBalanceOpenSpan = document.getElementById('user-balance-open');
    const notEnoughFundsOpenP = document.getElementById('not-enough-funds-open');
    const openActualCaseBtn = document.getElementById('open-actual-case-btn'); // –ö–Ω–æ–ø–∫–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
    const openingStatusTextCaseP = document.getElementById('opening-status-text-case');
    const rouletteTrackCaseDiv = document.querySelector('.roulette-track-case');
    const visualPrizeTextCaseP = document.getElementById('visual-prize-text-case');
    const casesListContainer = document.getElementById('cases-list-container');


    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ URL
    let currentUserId = null;
    let currentBalance = 0;
    let currentCaseDataForOpening = null; // { key, name, emoji, cost, prizesForAnimation }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
    function initializeApp() {
        if (!tg) {
            showErrorInApp("Telegram API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram.");
            return;
        }
        tg.ready();
        tg.expand();
        applyTheme(); // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –¢–ì

        const queryParams = new URLSearchParams(window.location.search);
        currentUserId = queryParams.get('userId');
        const balanceParam = queryParams.get('balance');
        
        if (currentUserId && balanceParam !== null) {
            currentBalance = parseInt(balanceParam, 10);
            if (isNaN(currentBalance)) currentBalance = 0;
            updateAppBalance(currentBalance);
        } else {
            showErrorInApp("–û—à–∏–±–∫–∞: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã.");
            // –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É –±–æ—Ç–∞, –µ—Å–ª–∏ WebApp –æ—Ç–∫—Ä—ã—Ç –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            // requestDataFromBot({ action: 'get_initial_data' });
            // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—à–∏–±–∫–∞
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç–∫—Ä–∞–Ω –ø–æ–∫–∞–∑–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç entrypoint
        const entrypoint = queryParams.get('entrypoint');
        if (entrypoint === 'case_open') {
            const caseKey = queryParams.get('caseKey');
            const caseName = queryParams.get('caseName') ? decodeURIComponent(queryParams.get('caseName')) : '–ö–µ–π—Å';
            const caseEmoji = queryParams.get('caseEmoji') ? decodeURIComponent(queryParams.get('caseEmoji')) : '‚ùì';
            const caseCost = queryParams.get('caseCost') ? parseInt(queryParams.get('caseCost'), 10) : 0;
            const prizesParam = queryParams.get('prizes');
            let prizesForAnimation = ['‚≠ê', 'üí£', 'üéÅ'];
            if (prizesParam) {
                try {
                    prizesForAnimation = JSON.parse(decodeURIComponent(prizesParam));
                    if (!Array.isArray(prizesForAnimation) || prizesForAnimation.length === 0) {
                        prizesForAnimation = ['‚≠ê', 'üí£', 'üéÅ'];
                    }
                } catch (e) { console.error("Error parsing prizes for case open:", e); }
            }
            currentCaseDataForOpening = { key: caseKey, name: caseName, emoji: caseEmoji, cost: caseCost, prizesForAnimation };
            setupCaseOpeningScreen();
            navigateToScreen('case-opening-screen');
        } else {
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∏–≥—Ä, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ entrypoint
            navigateToScreen('games-screen');
            // –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤ –¥–ª—è —ç–∫—Ä–∞–Ω–∞ –∏–≥—Ä
            loadCasesForGamesScreen();
        }
        hideInitialLoading();
    }

    function applyTheme() {
        if (tg && tg.themeParams) {
            const root = document.documentElement;
            // –ü—Ä–æ–π–¥–µ–º—Å—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º —Ü–≤–µ—Ç–∞–º –∏ —É—Å—Ç–∞–Ω–æ–≤–∏–º –∏—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç–µ–º–µ
            if (tg.themeParams.bg_color) root.style.setProperty('--main-bg', tg.themeParams.bg_color);
            if (tg.themeParams.text_color) root.style.setProperty('--text-color-light', tg.themeParams.text_color);
            if (tg.themeParams.button_color) root.style.setProperty('--secondary-yellow-matte', tg.themeParams.button_color);
            if (tg.themeParams.button_text_color) root.style.setProperty('--main-bg', tg.themeParams.button_text_color); // –î–ª—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∂–µ–ª—Ç—ã—Ö –∫–Ω–æ–ø–∫–∞—Ö
            if (tg.themeParams.secondary_bg_color) root.style.setProperty('--container-bg', tg.themeParams.secondary_bg_color);

            // –®–∞–ø–∫—É WebApp –º–æ–∂–Ω–æ —Ç–æ–∂–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å
            tg.setHeaderColor(tg.themeParams.secondary_bg_color || '#141416');
        }
    }

    function updateAppBalance(newBalance) {
        currentBalance = newBalance;
        if (appBalanceSpan) appBalanceSpan.textContent = newBalance;
        // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞ –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–∞—Ö, –≥–¥–µ –æ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
        document.querySelectorAll('.current-balance-stakes, #user-balance-open').forEach(el => el.textContent = newBalance);
    }

    function hideInitialLoading() {
        if (initialLoadingScreen) initialLoadingScreen.classList.remove('active-screen');
    }

    function showErrorInApp(message) {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–π –ø–æ–∫–∞–∑ –æ—à–∏–±–æ–∫ –≤–Ω—É—Ç—Ä–∏ WebApp
        console.error("WebApp Error:", message);
        alert(message); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
        if (initialLoadingScreen) initialLoadingScreen.classList.remove('active-screen');
        // –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
    }
    
    // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è ---
    function navigateToScreen(screenId) {
        screens.forEach(screen => {
            screen.classList.remove('active-screen');
        });
        const targetScreen = document.getElementById(screenId);
        if (targetScreen) {
            targetScreen.classList.add('active-screen');
        }

        navButtons.forEach(button => {
            button.classList.remove('active');
            if (button.dataset.targetscreen === screenId) {
                button.classList.add('active');
            }
        });
        // –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —ç–∫—Ä–∞–Ω –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞, –¥–µ–ª–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (screenId === 'case-opening-screen') {
             navButtons.forEach(button => button.classList.remove('active'));
        }
    }

    navButtons.forEach(button => {
        button.addEventListener('click', () => {
            const targetScreenId = button.dataset.targetscreen;
            navigateToScreen(targetScreenId);
            if (targetScreenId === 'games-screen') loadCasesForGamesScreen();
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        });
    });
    
    document.querySelectorAll('.back-to-games-btn').forEach(button => {
        button.addEventListener('click', () => navigateToScreen('games-screen'));
    });

    // --- –õ–æ–≥–∏–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è) ---
    function setupCaseOpeningScreen() {
        if (!currentCaseDataForOpening) return;
        const { name, emoji, cost, prizesForAnimation } = currentCaseDataForOpening;

        if (caseEmojiOpenDiv) caseEmojiOpenDiv.textContent = emoji;
        if (caseNameOpenH2) caseNameOpenH2.textContent = name;
        if (caseCostOpenSpan) caseCostOpenSpan.textContent = cost;
        if (userBalanceOpenSpan) userBalanceOpenSpan.textContent = currentBalance; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (openingStatusTextCaseP) openingStatusTextCaseP.textContent = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å";
        if (visualPrizeTextCaseP) visualPrizeTextCaseP.style.display = 'none';


        if (currentBalance < cost) {
            if (notEnoughFundsOpenP) notEnoughFundsOpenP.style.display = 'block';
            if (openActualCaseBtn) openActualCaseBtn.disabled = true;
        } else {
            if (notEnoughFundsOpenP) notEnoughFundsOpenP.style.display = 'none';
            if (openActualCaseBtn) openActualCaseBtn.disabled = false;
        }
    }
    
    let isCaseOpeningInProgress = false;

    async function startCaseRouletteAnimation() {
        if (!rouletteTrackCaseDiv || !currentCaseDataForOpening || isCaseOpeningInProgress) return;
        isCaseOpeningInProgress = true;
        if (openActualCaseBtn) openActualCaseBtn.disabled = true;

        const prizesForAnimation = currentCaseDataForOpening.prizesForAnimation;
        if (!prizesForAnimation || prizesForAnimation.length === 0) {
            showErrorInApp("–ù–µ—Ç –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–µ–π—Å–∞!");
            isCaseOpeningInProgress = false;
            if (openActualCaseBtn) openActualCaseBtn.disabled = (currentBalance < currentCaseDataForOpening.cost);
            return;
        }
        
        populateRouletteTrack(rouletteTrackCaseDiv, prizesForAnimation);
        if (openingStatusTextCaseP) openingStatusTextCaseP.textContent = "–ö—Ä—É—Ç–∏—Ç—Å—è...";
        if (visualPrizeTextCaseP) visualPrizeTextCaseP.style.display = 'none';

        const itemWidth = 70;
        const fullTrackItems = Array.from(rouletteTrackCaseDiv.children);
        const viewportWidth = rouletteTrackCaseDiv.parentElement.clientWidth;

        const initialOffset = (fullTrackItems.length / 2 - 3) * itemWidth;
        rouletteTrackCaseDiv.style.transition = 'none';
        rouletteTrackCaseDiv.style.transform = `translateX(-${initialOffset}px)`;

        const visualWinPrizeObject = prizesForAnimation[Math.floor(Math.random() * prizesForAnimation.length)];
        const visualWinEmoji = (typeof visualWinPrizeObject === 'object' && visualWinPrizeObject.emoji) ? visualWinPrizeObject.emoji : visualWinPrizeObject;


        let targetStopOverallIndex = -1;
        for (let i = fullTrackItems.length - 1; i >= fullTrackItems.length - (prizesForAnimation.length * 4); i--) {
            const itemContent = fullTrackItems[i].textContent; // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É (—ç–º–æ–¥–∑–∏)
            if (itemContent === visualWinEmoji) {
                targetStopOverallIndex = i;
                break;
            }
        }
        if (targetStopOverallIndex === -1) {
            targetStopOverallIndex = fullTrackItems.length - Math.floor(prizesForAnimation.length * 1.5) + Math.floor(Math.random() * prizesForAnimation.length) ;
        }
        
        const finalPositionX = -(targetStopOverallIndex * itemWidth - (viewportWidth / 2) + (itemWidth / 2));

        await new Promise(resolve => setTimeout(resolve, 50));

        const animationDuration = 4000 + Math.random() * 1000;
        rouletteTrackCaseDiv.style.transition = `transform ${animationDuration}ms cubic-bezier(0.2, 0.95, 0.35, 1.0)`;
        rouletteTrackCaseDiv.style.transform = `translateX(${finalPositionX}px)`;

        setTimeout(() => {
            if (openingStatusTextCaseP) openingStatusTextCaseP.textContent = "–£–¥–∞—á–∞!";
            if (visualPrizeTextCaseP) {
                visualPrizeTextCaseP.textContent = `–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ: ${visualWinEmoji}`;
                visualPrizeTextCaseP.style.display = 'block';
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç—É
            requestDataFromBot({
                action: 'open_case',
                caseKey: currentCaseDataForOpening.key
            });
            // –ù–µ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–∑—É, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –≤ —á–∞—Ç
            // isCaseOpeningInProgress = false; // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞
            // if (openActualCaseBtn) openActualCaseBtn.disabled = (currentBalance < currentCaseDataForOpening.cost);
            setTimeout(() => { // –ê–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                 if (tg) tg.close();
            }, 2500);

        }, animationDuration + 100);
    }

    if (openActualCaseBtn) {
        openActualCaseBtn.addEventListener('click', startCaseRouletteAnimation);
    }

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤ ---
    function loadCasesForGamesScreen() {
        if (casesListContainer) casesListContainer.innerHTML = '<p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤...</p>';
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã fetch-–∑–∞–ø—Ä–æ—Å –∫ –±–æ—Ç—É
        // requestDataFromBot({ action: 'get_game_cases_list' });
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        
        // –ó–∞–≥–ª—É—à–∫–∞: –µ—Å–ª–∏ –±—ã –∫–µ–π—Å—ã –ø–µ—Ä–µ–¥–∞–≤–∞–ª–∏—Å—å –≤ URL (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–ø–∏—Å–∫–∞)
        const demoCases = [
            { key: 'common', name: '–û–±—ã—á–Ω—ã–π –ö–µ–π—Å', emoji: 'üéÅ', cost: 50, prizesForAnimation: ['‚≠ê', 'üí£'] },
            { key: 'rare', name: '–†–µ–¥–∫–∏–π –ö–µ–π—Å', emoji: 'üíé', cost: 100, prizesForAnimation: ['üíé', '‚≠ê', 'üí£'] }
        ];
        renderCasesList(demoCases);
    }

    function renderCasesList(cases) {
        if (!casesListContainer) return;
        casesListContainer.innerHTML = '';
        if (!cases || cases.length === 0) {
            casesListContainer.innerHTML = '<p>–î–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –Ω–µ—Ç.</p>';
            return;
        }
        cases.forEach(caseData => {
            const caseDiv = document.createElement('div');
            caseDiv.classList.add('case-item-webapp');
            caseDiv.innerHTML = `
                <span>${caseData.emoji} ${caseData.name}</span>
                <span class="cost">${caseData.cost} ‚≠ê</span>
            `;
            caseDiv.addEventListener('click', () => {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω –æ—Ç–∫—Ä—ã—Ç–∏—è
                currentCaseDataForOpening = caseData;
                setupCaseOpeningScreen();
                navigateToScreen('case-opening-screen');
            });
            casesListContainer.appendChild(caseDiv);
        });
    }
    
    // --- –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç—É ---
    function requestDataFromBot(data) {
        if (!tg || !currentUserId) {
            showErrorInApp("–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Telegram API.");
            return;
        }
        const dataToSend = JSON.stringify({
            userId: currentUserId,
            ...data // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
        });
        console.log("Sending to bot:", dataToSend);
        tg.sendData(dataToSend);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    initializeApp();
});
