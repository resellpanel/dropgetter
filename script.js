// script.js
document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram.WebApp;

    const loadingStateDiv = document.getElementById('loading-state');
    const errorStateDiv = document.getElementById('error-state');
    const errorMessageP = document.getElementById('error-message');
    const closeErrorBtn = document.getElementById('close-error-btn');
    const caseDisplayStateDiv = document.getElementById('case-display-state');
    const caseEmojiDiv = document.getElementById('case-emoji');
    const caseNameH1 = document.getElementById('case-name');
    const caseCostSpan = document.getElementById('case-cost');
    const userBalanceSpan = document.getElementById('user-balance');
    const notEnoughFundsP = document.getElementById('not-enough-funds');
    const openCaseBtn = document.getElementById('open-case-btn');
    const openBtnCostSpan = document.getElementById('open-btn-cost');
    const openingStateDiv = document.getElementById('opening-state');
    const rouletteTrack = document.querySelector('.roulette-track');
    const openingStatusText = document.getElementById('opening-status-text');

    let userId = null;
    let caseKey = null;
    let caseCost = 0;
    let balance = 0;
    let caseName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–µ–π—Å';
    let caseEmoji = '‚ùì';
    let possiblePrizes = ['‚≠ê', 'üí£', 'üéÅ', '‚ùì']; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

    function showState(stateId) {
        ['loading-state', 'error-state', 'case-display-state', 'opening-state'].forEach(id => {
            const el = document.getElementById(id);
            if (el) el.style.display = (id === stateId) ? 'flex' : 'none'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º flex –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            if (id === stateId && el) { // –î–æ–±–∞–≤–∏–º flex-direction –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö
                if (id === 'loading-state' || id === 'opening-state' || id === 'error-state') {
                    el.style.flexDirection = 'column';
                }
            }
        });
    }

    function showError(message) {
        if (errorMessageP) errorMessageP.textContent = message;
        showState('error-state');
    }

    if (tg) {
        tg.ready();
        tg.expand();
        // document.body.style.backgroundColor = tg.themeParams.bg_color || '#FFF8E1'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        // document.body.style.color = tg.themeParams.text_color || '#4A3B00';
        // document.documentElement.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#FFF8E1');
        // document.documentElement.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#4A3B00');
        // document.documentElement.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#B0A070');
        // document.documentElement.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#D4AF37');
        // document.documentElement.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#FFC107');
        // document.documentElement.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#4A3B00');
        // document.documentElement.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || 'rgba(255, 243, 200, 0.7)');


        if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
            userId = tg.initDataUnsafe.user.id?.toString();
        }

        const queryParams = new URLSearchParams(window.location.search);
        caseKey = queryParams.get('caseKey');
        const pCaseCost = queryParams.get('caseCost');
        const pBalance = queryParams.get('balance');
        const pCaseName = queryParams.get('caseName');
        const pCaseEmoji = queryParams.get('caseEmoji');
        const pUserIdFromUrl = queryParams.get('userId');
        const prizesParam = queryParams.get('prizes');

        if (!userId && pUserIdFromUrl) userId = pUserIdFromUrl;

        if (prizesParam) {
            try {
                possiblePrizes = JSON.parse(decodeURIComponent(prizesParam));
                if (!Array.isArray(possiblePrizes) || possiblePrizes.length === 0) {
                    possiblePrizes = ['‚≠ê', 'üí£', 'üéÅ', '‚ùì', 'üíé', 'üçÄ'];
                }
            } catch (e) {
                console.error("Error parsing prizes data:", e);
                showError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–∑–∞—Ö –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏.");
            }
        }


        if (caseKey && pCaseCost !== null && pBalance !== null && userId) {
            caseCost = parseInt(pCaseCost, 10);
            balance = parseInt(pBalance, 10);
            if (pCaseName) caseName = decodeURIComponent(pCaseName);
            if (pCaseEmoji) caseEmoji = decodeURIComponent(pCaseEmoji);

            if (caseEmojiDiv) caseEmojiDiv.textContent = caseEmoji;
            if (caseNameH1) caseNameH1.textContent = caseName;
            if (caseCostSpan) caseCostSpan.textContent = caseCost.toString();
            if (userBalanceSpan) userBalanceSpan.textContent = balance.toString();
            if (openBtnCostSpan) openBtnCostSpan.textContent = caseCost.toString();

            if (balance < caseCost) {
                if (notEnoughFundsP) notEnoughFundsP.style.display = 'block';
                if (openCaseBtn) openCaseBtn.disabled = true;
            } else {
                 if (notEnoughFundsP) notEnoughFundsP.style.display = 'none';
                 if (openCaseBtn) openCaseBtn.disabled = false;
            }
            showState('case-display-state');
        } else {
            console.error("Missing data:", {caseKey, pCaseCost, pBalance, userId});
            showError("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
        }

    } else {
        console.error("Telegram WebApp API –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        showError("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤ Telegram.");
    }

    function populateRouletteTrack() {
        if (!rouletteTrack) return;
        rouletteTrack.innerHTML = '';

        const repetitionFactor = 20; // –ë–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –¥–ª–∏–Ω–Ω–æ–π –ª–µ–Ω—Ç—ã
        let fullTrackItems = [];
        for (let i = 0; i < repetitionFactor; i++) {
            let shuffledPrizes = [...possiblePrizes].sort(() => 0.5 - Math.random());
            fullTrackItems = fullTrackItems.concat(shuffledPrizes);
        }

        fullTrackItems.forEach(prizeEmoji => {
            const itemDiv = document.createElement('div');
            itemDiv.classList.add('roulette-item');
            itemDiv.textContent = prizeEmoji;
            rouletteTrack.appendChild(itemDiv);
        });
    }

    async function startRouletteAnimation() {
        if (!rouletteTrack || possiblePrizes.length === 0) return;

        populateRouletteTrack();
        if (openingStatusText) openingStatusText.textContent = "–ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã...";

        const itemWidth = 70; // –®–∏—Ä–∏–Ω–∞ –∏–∑ CSS
        const itemsInTrack = rouletteTrack.children.length;
        const viewportWidth = rouletteTrack.parentElement.clientWidth;

        rouletteTrack.style.transition = 'none';
        rouletteTrack.style.transform = `translateX(0px)`; // –ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ

        // –¶–µ–ª–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –í–ò–ó–£–ê–õ–¨–ù–û–ô –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        // –ü—É—Å—Ç—å —ç—Ç–æ –±—É–¥–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≥–¥–µ-—Ç–æ –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —Ç—Ä–µ–∫–∞, –Ω–æ –Ω–µ —É —Å–∞–º–æ–≥–æ –∫–æ–Ω—Ü–∞
        const targetStopIndex = Math.floor(itemsInTrack * 0.75) + Math.floor(Math.random() * (possiblePrizes.length * 2));
        const finalPositionX = -(targetStopIndex * itemWidth - (viewportWidth / 2) + (itemWidth / 2));

        // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤ –Ω–∞—á–∞–ª–æ –∞–Ω–∏–º–∞—Ü–∏–∏ (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –≤–∏–¥–Ω–æ —Å—Ç–∞—Ä—Ç–∞ —Å 0px)
        const initialFastScroll = -(itemsInTrack * itemWidth * 0.3); // –ü—Ä–æ–∫—Ä—É—Ç–∏–º –Ω–∞ 30% —Ç—Ä–µ–∫–∞
        rouletteTrack.style.transform = `translateX(${initialFastScroll}px)`;


        await new Promise(resolve => setTimeout(resolve, 50)); // –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞

        // –û—Å–Ω–æ–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
        const animationDuration = 5000 + Math.random() * 1000; // 5-6 —Å–µ–∫—É–Ω–¥
        rouletteTrack.style.transition = `transform ${animationDuration}ms cubic-bezier(0.2, 0.8, 0.25, 1)`;
        rouletteTrack.style.transform = `translateX(${finalPositionX}px)`;

        setTimeout(() => {
            if (openingStatusText) openingStatusText.textContent = "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω!";
            
            const dataToSend = JSON.stringify({
                action: 'open_case',
                userId: userId,
                caseKey: caseKey,
            });
            tg.sendData(dataToSend);
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebApp —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∏–º–∞—Ü–∏–∏
             setTimeout(() => {
                if(tg) tg.close();
             }, 1500); // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º

        }, animationDuration + 200); // +200ms –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
    }

    function handleOpenCase() {
        if (!tg) { showError("–û—à–∏–±–∫–∞ Telegram API"); return; }
        if (!caseKey || userId === null || caseCost === undefined || balance === undefined ) { // caseCost –º–æ–∂–µ—Ç –±—ã—Ç—å 0
            showError("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞ –Ω–µ–ø–æ–ª–Ω—ã–µ."); return;
        }
        if (balance < caseCost) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–±—Ä–∞—Ü–∏—é
            if (tg.HapticFeedback) tg.HapticFeedback.notificationOccurred('error');
            return;
        }

        showState('opening-state');
        if (openCaseBtn) openCaseBtn.disabled = true;
        if (tg.HapticFeedback) tg.HapticFeedback.impactOccurred('medium');

        startRouletteAnimation();
    }

    if (openCaseBtn) {
        openCaseBtn.addEventListener('click', handleOpenCase);
    }
    if (closeErrorBtn) {
        closeErrorBtn.addEventListener('click', () => {
            if(tg) tg.close();
        });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ç–µ–º—ã Telegram, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (tg && tg.themeParams) {
        const root = document.documentElement;
        for (const key in tg.themeParams) {
            if (Object.hasOwnProperty.call(tg.themeParams, key)) {
                // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏ —Ç–∏–ø–∞ 'bg_color' –≤ '--tg-theme-bg-color'
                const cssVarName = `--tg-theme-${key.replace(/_/g, '-')}`;
                root.style.setProperty(cssVarName, tg.themeParams[key]);
            }
        }
    }
});
